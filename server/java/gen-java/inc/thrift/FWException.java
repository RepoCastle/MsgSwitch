/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package inc.thrift;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FWException extends Exception implements org.apache.thrift.TBase<FWException, FWException._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FWException");

  private static final org.apache.thrift.protocol.TField ERR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("errCode", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ADDITIONAL_INFORMATION_FIELD_DESC = new org.apache.thrift.protocol.TField("additionalInformation", org.apache.thrift.protocol.TType.STRING, (short)2);

  public String errCode;
  public String additionalInformation;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ERR_CODE((short)1, "errCode"),
    ADDITIONAL_INFORMATION((short)2, "additionalInformation");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ERR_CODE
          return ERR_CODE;
        case 2: // ADDITIONAL_INFORMATION
          return ADDITIONAL_INFORMATION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ERR_CODE, new org.apache.thrift.meta_data.FieldMetaData("errCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDITIONAL_INFORMATION, new org.apache.thrift.meta_data.FieldMetaData("additionalInformation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FWException.class, metaDataMap);
  }

  public FWException() {
  }

  public FWException(
    String errCode,
    String additionalInformation)
  {
    this();
    this.errCode = errCode;
    this.additionalInformation = additionalInformation;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FWException(FWException other) {
    if (other.isSetErrCode()) {
      this.errCode = other.errCode;
    }
    if (other.isSetAdditionalInformation()) {
      this.additionalInformation = other.additionalInformation;
    }
  }

  public FWException deepCopy() {
    return new FWException(this);
  }

  @Override
  public void clear() {
    this.errCode = null;
    this.additionalInformation = null;
  }

  public String getErrCode() {
    return this.errCode;
  }

  public FWException setErrCode(String errCode) {
    this.errCode = errCode;
    return this;
  }

  public void unsetErrCode() {
    this.errCode = null;
  }

  /** Returns true if field errCode is set (has been assigned a value) and false otherwise */
  public boolean isSetErrCode() {
    return this.errCode != null;
  }

  public void setErrCodeIsSet(boolean value) {
    if (!value) {
      this.errCode = null;
    }
  }

  public String getAdditionalInformation() {
    return this.additionalInformation;
  }

  public FWException setAdditionalInformation(String additionalInformation) {
    this.additionalInformation = additionalInformation;
    return this;
  }

  public void unsetAdditionalInformation() {
    this.additionalInformation = null;
  }

  /** Returns true if field additionalInformation is set (has been assigned a value) and false otherwise */
  public boolean isSetAdditionalInformation() {
    return this.additionalInformation != null;
  }

  public void setAdditionalInformationIsSet(boolean value) {
    if (!value) {
      this.additionalInformation = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ERR_CODE:
      if (value == null) {
        unsetErrCode();
      } else {
        setErrCode((String)value);
      }
      break;

    case ADDITIONAL_INFORMATION:
      if (value == null) {
        unsetAdditionalInformation();
      } else {
        setAdditionalInformation((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ERR_CODE:
      return getErrCode();

    case ADDITIONAL_INFORMATION:
      return getAdditionalInformation();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ERR_CODE:
      return isSetErrCode();
    case ADDITIONAL_INFORMATION:
      return isSetAdditionalInformation();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FWException)
      return this.equals((FWException)that);
    return false;
  }

  public boolean equals(FWException that) {
    if (that == null)
      return false;

    boolean this_present_errCode = true && this.isSetErrCode();
    boolean that_present_errCode = true && that.isSetErrCode();
    if (this_present_errCode || that_present_errCode) {
      if (!(this_present_errCode && that_present_errCode))
        return false;
      if (!this.errCode.equals(that.errCode))
        return false;
    }

    boolean this_present_additionalInformation = true && this.isSetAdditionalInformation();
    boolean that_present_additionalInformation = true && that.isSetAdditionalInformation();
    if (this_present_additionalInformation || that_present_additionalInformation) {
      if (!(this_present_additionalInformation && that_present_additionalInformation))
        return false;
      if (!this.additionalInformation.equals(that.additionalInformation))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(FWException other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    FWException typedOther = (FWException)other;

    lastComparison = Boolean.valueOf(isSetErrCode()).compareTo(typedOther.isSetErrCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errCode, typedOther.errCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdditionalInformation()).compareTo(typedOther.isSetAdditionalInformation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdditionalInformation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.additionalInformation, typedOther.additionalInformation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // ERR_CODE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.errCode = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // ADDITIONAL_INFORMATION
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.additionalInformation = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.errCode != null) {
      oprot.writeFieldBegin(ERR_CODE_FIELD_DESC);
      oprot.writeString(this.errCode);
      oprot.writeFieldEnd();
    }
    if (this.additionalInformation != null) {
      oprot.writeFieldBegin(ADDITIONAL_INFORMATION_FIELD_DESC);
      oprot.writeString(this.additionalInformation);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FWException(");
    boolean first = true;

    sb.append("errCode:");
    if (this.errCode == null) {
      sb.append("null");
    } else {
      sb.append(this.errCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("additionalInformation:");
    if (this.additionalInformation == null) {
      sb.append("null");
    } else {
      sb.append(this.additionalInformation);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

